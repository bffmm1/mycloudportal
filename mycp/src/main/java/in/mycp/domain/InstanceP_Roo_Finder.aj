// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package in.mycp.domain;

import in.mycp.domain.Asset;
import in.mycp.domain.InstanceP;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect InstanceP_Roo_Finder {
    
    public static TypedQuery<InstanceP> InstanceP.findInstancePsByAsset(Asset asset) {
        if (asset == null) throw new IllegalArgumentException("The asset argument is required");
        EntityManager em = InstanceP.entityManager();
        TypedQuery<InstanceP> q = em.createQuery("SELECT o FROM InstanceP AS o WHERE o.asset = :asset", InstanceP.class);
        q.setParameter("asset", asset);
        return q;
    }
    
    public static TypedQuery<InstanceP> InstanceP.findInstancePsByInstanceIdEquals(String instanceId) {
        if (instanceId == null || instanceId.length() == 0) throw new IllegalArgumentException("The instanceId argument is required");
        EntityManager em = InstanceP.entityManager();
        TypedQuery<InstanceP> q = em.createQuery("SELECT o FROM InstanceP AS o WHERE o.instanceId = :instanceId", InstanceP.class);
        q.setParameter("instanceId", instanceId);
        return q;
    }
    
    public static TypedQuery<InstanceP> InstanceP.findInstancePsByKeyNameNotEquals(String keyName) {
        if (keyName == null || keyName.length() == 0) throw new IllegalArgumentException("The keyName argument is required");
        EntityManager em = InstanceP.entityManager();
        TypedQuery<InstanceP> q = em.createQuery("SELECT o FROM InstanceP AS o WHERE o.keyName != :keyName", InstanceP.class);
        q.setParameter("keyName", keyName);
        return q;
    }
    
    public static TypedQuery<InstanceP> InstanceP.findInstancePsByReservationDescription(Integer reservationDescription) {
        if (reservationDescription == null) throw new IllegalArgumentException("The reservationDescription argument is required");
        EntityManager em = InstanceP.entityManager();
        TypedQuery<InstanceP> q = em.createQuery("SELECT o FROM InstanceP AS o WHERE o.reservationDescription = :reservationDescription", InstanceP.class);
        q.setParameter("reservationDescription", reservationDescription);
        return q;
    }
    
}
