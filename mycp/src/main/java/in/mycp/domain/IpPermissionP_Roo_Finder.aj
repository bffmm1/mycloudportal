// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package in.mycp.domain;

import in.mycp.domain.GroupDescriptionP;
import in.mycp.domain.IpPermissionP;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect IpPermissionP_Roo_Finder {
    
    public static TypedQuery<IpPermissionP> IpPermissionP.findIpPermissionPsByGroupDescription(GroupDescriptionP groupDescription) {
        if (groupDescription == null) throw new IllegalArgumentException("The groupDescription argument is required");
        EntityManager em = IpPermissionP.entityManager();
        TypedQuery<IpPermissionP> q = em.createQuery("SELECT o FROM IpPermissionP AS o WHERE o.groupDescription = :groupDescription", IpPermissionP.class);
        q.setParameter("groupDescription", groupDescription);
        return q;
    }
    
    public static TypedQuery<IpPermissionP> IpPermissionP.findIpPermissionPsByGroupDescriptionAndProtocolEqualsAndFromPortEquals(GroupDescriptionP groupDescription, String protocol, Integer fromPort) {
        if (groupDescription == null) throw new IllegalArgumentException("The groupDescription argument is required");
        if (protocol == null || protocol.length() == 0) throw new IllegalArgumentException("The protocol argument is required");
        if (fromPort == null) throw new IllegalArgumentException("The fromPort argument is required");
        EntityManager em = IpPermissionP.entityManager();
        TypedQuery<IpPermissionP> q = em.createQuery("SELECT o FROM IpPermissionP AS o WHERE o.groupDescription = :groupDescription AND o.protocol = :protocol  AND o.fromPort = :fromPort", IpPermissionP.class);
        q.setParameter("groupDescription", groupDescription);
        q.setParameter("protocol", protocol);
        q.setParameter("fromPort", fromPort);
        return q;
    }
    
    public static TypedQuery<IpPermissionP> IpPermissionP.findIpPermissionPsByProtocolEqualsAndToPortEqualsAndFromPortEquals(String protocol, Integer toPort, Integer fromPort) {
        if (protocol == null || protocol.length() == 0) throw new IllegalArgumentException("The protocol argument is required");
        if (toPort == null) throw new IllegalArgumentException("The toPort argument is required");
        if (fromPort == null) throw new IllegalArgumentException("The fromPort argument is required");
        EntityManager em = IpPermissionP.entityManager();
        TypedQuery<IpPermissionP> q = em.createQuery("SELECT o FROM IpPermissionP AS o WHERE o.protocol = :protocol  AND o.toPort = :toPort  AND o.fromPort = :fromPort", IpPermissionP.class);
        q.setParameter("protocol", protocol);
        q.setParameter("toPort", toPort);
        q.setParameter("fromPort", fromPort);
        return q;
    }
    
}
